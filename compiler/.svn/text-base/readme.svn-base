this daemon just run at a new user,for protect my pc,as a 
bad guy use system("ps -asx"); then he will get my linux 's all 
process pid,kill (?);other like ,he would get my home Directory
and delet all my file that's Painful for me .

so add a new group,user;
$ sudo groupadd developers 
$sudo useradd -G developers compiler
$sudo passwd compiler
then login with compiler with a shell ,
use the compiler user daemon the Program;

1.umount -t proc proc /proc
 let the ps invalid
2. at first let the exec file directory only read .  
3.the best way to check the code is use the strace ,it can analysis
  the code syscalls ,clone() execve() ,nanosleep() ,wait() ,vfork()
  but if the code has these syscalls ,strace check need start the code ,
  it is Contradictory!!!




about compile-time !
the boost code ,just need a long time to compile,it can't be more fast ,
my pc install the boost libraty ,and the .a .so libraries stored at /usr/lib
direction ,then #g++ -o file file.cpp can compile the code,not need add the tag
about the library direction,g++ use the pre-compiled ,and if the .so and .a Exist
the same time ,g++ will use the .so firstly. add -static just use the .a  . 


about program's memory 
1.use the command 
$pmap pid
vmstat
free
ps aux
top
2./proc/pid/maps or /proc/pid/smaps
it provide the details of the program's memory use .

about execute time 
1.gettimeofday(&st,NULL);
2.getrusage() returns current resource usages, for a who of either RUSAGE_SELF or RUSAGE_CHILDREN. The former asks for resources used by the current process, the latter for resources used by those of its children that have terminated and have been waited for.

struct rusage {
    struct timeval ru_utime; /* user time used */
    struct timeval ru_stime; /* system time used */
    long   ru_maxrss;        /* maximum resident set size */
    long   ru_ixrss;         /* integral shared memory size */
    long   ru_idrss;         /* integral unshared data size */
    long   ru_isrss;         /* integral unshared stack size */
    long   ru_minflt;        /* page reclaims */
    long   ru_majflt;        /* page faults */
    long   ru_nswap;         /* swaps */
    long   ru_inblock;       /* block input operations */
    long   ru_oublock;       /* block output operations */
    long   ru_msgsnd;        /* messages sent */
    long   ru_msgrcv;        /* messages received */
    long   ru_nsignals;      /* signals received */
    long   ru_nvcsw;         /* voluntary context switches */
    long   ru_nivcsw;        /* involuntary context switches */
};

3.use the ptrace() syscall 
analysis the code .
The ptrace() system call provides a means by which a parent process may observe and control the execution of another process, and examine and change its core image and registers. It is primarily used to implement breakpoint debugging and system call tracing.
#include <sys/ptrace.h>
long ptrace(enum __ptrace_request request, pid_t pid,             void
*addr, void *data);

4.about java compile support
The key problem is get the main-class ,i design a imperfect way to handle it.FIrstly, get the class file,the check if the class file contains the "main" keywords, if so set the class Main-Class , if not index the next class file .Though that works ,but it's not a perfert solution .


5.about go lang
The compiler of go is different by the machine .
6g is the Go compiler for amd64; it will write the output in file.6. 
The ¡®6¡¯ identifies files for the amd64 architecture. 
The identifier letters for 386 and arm are ¡®8¡¯ and ¡®5¡¯. 
That is, if you were compiling for 386, you would use 8g and the output would be named file.8.
My dev machine is 386 , i choice the 8g,8l .