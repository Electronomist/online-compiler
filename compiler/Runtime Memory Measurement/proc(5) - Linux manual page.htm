
<!-- saved from url=(0065)http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>proc(5) - Linux manual page</title>
<style type="text/css">
<!--
body { color:#000000; background-color:#F8F8F8; }
b    { color:#502000; }
i    { color:#006000; }
h2   { color:#A00000; padding-top: 15px; font-size: 100%; }
h3   { color:#600000; font-size: 100%; padding-top: 10px; padding-left: 20px; }
pre  { font-family: monospace, courier; }
a:link    { text-decoration: none; color: blue; }
a:visited { text-decoration: none; color: blue; }
a:hover   { text-decoration: underline; color: red; }
a:active  { text-decoration: underline; background-color: #FFD0D0; }
//-->
</style>
</head>
<body><a name="section_dir"></a>
<form method="get" action="http://www.google.com/custom">
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr>
<td align="left">
<font size="-1">

<a href="http://www.kernel.org/doc/man-pages/index.html">home</a> &nbsp;
<a href="http://www.kernel.org/doc/man-pages/contributing.html">contributing</a> &nbsp;
<a href="http://www.kernel.org/doc/man-pages/reporting_bugs.html">bugs</a> &nbsp;
<a href="http://www.kernel.org/doc/man-pages/download.html">download</a> &nbsp;
<a href="http://www.kernel.org/doc/man-pages/online_pages.html">online pages</a> &nbsp;
</font>
</td>
<td align="right">
<input type="text" name="q" size="10" maxlength="255" value="">
<input type="hidden" name="sitesearch" value="kernel.org/doc/man-pages/online/pages">
<input type="submit" name="sa" value="Search online pages">
</td>
</tr>
</tbody></table>
</form>
<hr>
<p>
<table width="100%"><tbody><tr><td><font size="-2"><a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#NAME">NAME</a> | <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#DESCRIPTION">DESCRIPTION</a> | <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#NOTES">NOTES</a> | <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#SEE_ALSO">SEE ALSO</a> | <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#COLOPHON">COLOPHON</a></font></td><td align="right"><font size="-2"><a href="http://man7.org/tlpi/"><em>The Linux Programming Interface</em></a></font></td></tr></tbody></table>
</p><pre><!-- Manpage converted by man2html 3.0.1 -->
PROC(5)                       Linux Programmer's Manual                       PROC(5)
</pre>
<a name="NAME" href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#NAME"></a><h2>NAME  &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#section_dir"><font size="-2">top</font></a></h2><pre>       proc - process information pseudo-file system
</pre>
<a name="DESCRIPTION" href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#DESCRIPTION"></a><h2>DESCRIPTION  &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#section_dir"><font size="-2">top</font></a></h2><pre>       The <i>proc</i> file system is a pseudo-file system which is used as an interface to
       kernel data structures.  It is commonly mounted at <i>/proc</i>.  Most of it is read-
       only, but some files allow kernel variables to be changed.

       The following outline gives a quick tour through the <i>/proc</i> hierarchy.

       <i>/proc/[pid]</i>
              There is a numerical subdirectory for each running process; the
              subdirectory is named by the process ID.  Each such subdirectory
              contains the following pseudo-files and directories.

       <i>/proc/[pid]/auxv</i> (since 2.6.0-test7)
              This contains the contents of the ELF interpreter information passed to
              the process at exec time.  The format is one <i>unsigned</i> <i>long</i> ID plus one
              <i>unsigned</i> <i>long</i> value for each entry.  The last entry contains two zeros.

       <i>/proc/[pid]/cmdline</i>
              This holds the complete command line for the process, unless the
              process is a zombie.  In the latter case, there is nothing in this
              file: that is, a read on this file will return 0 characters.  The
              command-line arguments appear in this file as a set of strings
              separated by null bytes ('\0'), with a further null byte after the last
              string.

       <i>/proc/[pid]/coredump_filter</i> (since kernel 2.6.23)
              See <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/core.5.html">core(5)</a>.

       <i>/proc/[pid]/cpuset</i> (since kernel 2.6.12)
              See <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">cpuset(7)</a>.

       <i>/proc/[pid]/cwd</i>
              This is a symbolic link to the current working directory of the
              process.  To find out the current working directory of process 20, for
              instance, you can do this:

                  $ <b>cd</b> <b>/proc/20/cwd;</b> <b>/bin/pwd</b>

              Note that the <i>pwd</i> command is often a shell built-in, and might not work
              properly.  In <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/bash.1.html">bash(1)</a>, you may use <i>pwd</i> <i>-P</i>.

              In a multithreaded process, the contents of this symbolic link are not
              available if the main thread has already terminated (typically by
              calling <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_exit.3.html">pthread_exit(3)</a>).

       <i>/proc/[pid]/environ</i>
              This file contains the environment for the process.  The entries are
              separated by null bytes ('\0'), and there may be a null byte at the
              end.  Thus, to print out the environment of process 1, you would do:

                  $ <b>(cat</b> <b>/proc/1/environ;</b> <b>echo)</b> <b>|</b> <b>tr</b> <b>'\000'</b> <b>'\n'</b>

       <i>/proc/[pid]/exe</i>
              Under Linux 2.2 and later, this file is a symbolic link containing the
              actual pathname of the executed command.  This symbolic link can be
              dereferenced normally; attempting to open it will open the executable.
              You can even type <i>/proc/[pid]/exe</i> to run another copy of the same
              executable as is being run by process [pid].  In a multithreaded
              process, the contents of this symbolic link are not available if the
              main thread has already terminated (typically by calling
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_exit.3.html">pthread_exit(3)</a>).

              Under Linux 2.0 and earlier <i>/proc/[pid]/exe</i> is a pointer to the binary
              which was executed, and appears as a symbolic link.  A <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readlink.2.html">readlink(2)</a> call
              on this file under Linux 2.0 returns a string in the format:

                  [device]:inode

              For example, [0301]:1502 would be inode 1502 on device major 03 (IDE,
              MFM, etc. drives) minor 01 (first partition on the first drive).

              <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/find.1.html">find(1)</a> with the <i>-inum</i> option can be used to locate the file.

       <i>/proc/[pid]/fd</i>
              This is a subdirectory containing one entry for each file which the
              process has open, named by its file descriptor, and which is a symbolic
              link to the actual file.  Thus, 0 is standard input, 1 standard output,
              2 standard error, etc.

              In a multithreaded process, the contents of this directory are not
              available if the main thread has already terminated (typically by
              calling <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_exit.3.html">pthread_exit(3)</a>).

              Programs that will take a filename as a command-line argument, but will
              not take input from standard input if no argument is supplied, or that
              write to a file named as a command-line argument, but will not send
              their output to standard output if no argument is supplied, can
              nevertheless be made to use standard input or standard out using
              <i>/proc/[pid]/fd</i>.  For example, assuming that <i>-i</i> is the flag designating
              an input file and <i>-o</i> is the flag designating an output file:

                  $ <b>foobar</b> <b>-i</b> <b>/proc/self/fd/0</b> <b>-o</b> <b>/proc/self/fd/1</b> <b>...</b>

              and you have a working filter.

              <i>/proc/self/fd/N</i> is approximately the same as <i>/dev/fd/N</i> in some UNIX and
              UNIX-like systems.  Most Linux MAKEDEV scripts symbolically link
              <i>/dev/fd</i> to <i>/proc/self/fd</i>, in fact.

              Most systems provide symbolic links <i>/dev/stdin</i>, <i>/dev/stdout</i>, and
              <i>/dev/stderr</i>, which respectively link to the files <i>0</i>, <i>1</i>, and <i>2</i> in
              <i>/proc/self/fd</i>.  Thus the example command above could be written as:

                  $ <b>foobar</b> <b>-i</b> <b>/dev/stdin</b> <b>-o</b> <b>/dev/stdout</b> <b>...</b>

       <i>/proc/[pid]/fdinfo/</i> (since kernel 2.6.22)
              This is a subdirectory containing one entry for each file which the
              process has open, named by its file descriptor.  The contents of each
              file can be read to obtain information about the corresponding file
              descriptor, for example:

                  $ <b>cat</b> <b>/proc/12015/fdinfo/4</b>
                  pos:    1000
                  flags:  01002002

              The <i>pos</i> field is a decimal number showing the current file offset.  The
              <i>flags</i> field is an octal number that displays the file access mode and
              file status flags (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/open.2.html">open(2)</a>).

              The files in this directory are readable only by the owner of the
              process.

       <i>/proc/[pid]/limits</i> (since kernel 2.6.24)
              This file displays the soft limit, hard limit, and units of measurement
              for each of the process's resource limits (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getrlimit.2.html">getrlimit(2)</a>).  The file
              is protected to only allow reading by the real UID of the process.

       <i>/proc/[pid]/maps</i>
              A file containing the currently mapped memory regions and their access
              permissions.

              The format is:

              address           perms offset  dev   inode   pathname
              08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm
              08056000-08058000 rw-p 0000d000 03:0c 64593   /usr/sbin/gpm
              08058000-0805b000 rwxp 00000000 00:00 0
              40000000-40013000 r-xp 00000000 03:0c 4165    /lib/ld-2.2.4.so
              40013000-40015000 rw-p 00012000 03:0c 4165    /lib/ld-2.2.4.so
              4001f000-40135000 r-xp 00000000 03:0c 45494   /lib/libc-2.2.4.so
              40135000-4013e000 rw-p 00115000 03:0c 45494   /lib/libc-2.2.4.so
              4013e000-40142000 rw-p 00000000 00:00 0
              bffff000-c0000000 rwxp 00000000 00:00 0

              where "address" is the address space in the process that it occupies,
              "perms" is a set of permissions:

                   r = read
                   w = write
                   x = execute
                   s = shared
                   p = private (copy on write)

              "offset" is the offset into the file/whatever, "dev" is the device
              (major:minor), and "inode" is the inode on that device.  0 indicates
              that no inode is associated with the memory region, as the case would
              be with BSS (uninitialized data).

              Under Linux 2.0 there is no field giving pathname.

       <i>/proc/[pid]/mem</i>
              This file can be used to access the pages of a process's memory through
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/open.2.html">open(2)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/read.2.html">read(2)</a>, and <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lseek.2.html">lseek(2)</a>.

       <i>/proc/[pid]/mountinfo</i> (since Linux 2.6.26)
              This file contains information about mount points.  It contains lines
              of the form:

              36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue
              (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)

              The numbers in parentheses are labels for the descriptions below:

              (1)  mount ID: unique identifier of the mount (may be reused after
                   <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/umount.2.html">umount(2)</a>).

              (2)  parent ID: ID of parent mount (or of self for the top of the mount
                   tree).

              (3)  major:minor: value of <i>st_dev</i> for files on file system (see
                   <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/stat.2.html">stat(2)</a>).

              (4)  root: root of the mount within the file system.

              (5)  mount point: mount point relative to the process's root.

              (6)  mount options: per-mount options.

              (7)  optional fields: zero or more fields of the form "tag[:value]".

              (8)  separator: marks the end of the optional fields.

              (9)  file system type: name of file system in the form
                   "type[.subtype]".

              (10) mount source: file system-specific information or "none".

              (11) super options: per-super block options.

              Parsers should ignore all unrecognized optional fields.  Currently the
              possible optional fields are:

                   shared:X          mount is shared in peer group X

                   master:X          mount is slave to peer group X

                   propagate_from:X  mount is slave and receives propagation from
                                     peer group X (*)

                   unbindable        mount is unbindable

              (*) X is the closest dominant peer group under the process's root.  If
              X is the immediate master of the mount, or if there is no dominant peer
              group under the same root, then only the "master:X" field is present
              and not the "propagate_from:X" field.

              For more information on mount propagation see:
              <i>Documentation/filesystems/sharedsubtree.txt</i> in the kernel source tree.

       <i>/proc/[pid]/mounts</i> (since Linux 2.4.19)
              This is a list of all the file systems currently mounted in the
              process's mount namespace.  The format of this file is documented in
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/fstab.5.html">fstab(5)</a>.  Since kernel version 2.6.15, this file is pollable: after
              opening the file for reading, a change in this file (i.e., a file
              system mount or unmount) causes <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html">select(2)</a> to mark the file descriptor
              as readable, and <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/poll.2.html">poll(2)</a> and <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_wait.2.html">epoll_wait(2)</a> mark the file as having an
              error condition.

       <i>/proc/[pid]/mountstats</i> (since Linux 2.6.17)
              This file exports information (statistics, configuration information)
              about the mount points in the process's name space.  Lines in this file
              have the form:

              device /dev/sda7 mounted on /home with fstype ext3 [statistics]
              (       1      )            ( 2 )             (3 ) (4)

              The fields in each line are:

              (1)  The name of the mounted device (or "nodevice" if there is no
                   corresponding device).

              (2)  The mount point within the file system tree.

              (3)  The file system type.

              (4)  Optional statistics and configuration information.  Currently (as
                   at Linux 2.6.26), only NFS file systems export information via
                   this field.

              This file is only readable by the owner of the process.

       <i>/proc/[pid]/numa_maps</i> (since Linux 2.6.14)
              See <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/numa.7.html">numa(7)</a>.

       <i>/proc/[pid]/oom_adj</i> (since Linux 2.6.11)
              This file can be used to adjust the score used to select which process
              should be killed in an out-of-memory (OOM) situation.  The kernel uses
              this value for a bit-shift operation of the process's <i>oom_score</i> value:
              valid values are in the range -16 to +15, plus the special value -17,
              which disables OOM-killing altogether for this process.  A positive
              score increases the likelihood of this process being killed by the OOM-
              killer; a negative score decreases the likelihood.  The default value
              for this file is 0; a new process inherits its parent's <i>oom_adj</i>
              setting.  A process must be privileged (<b>CAP_SYS_RESOURCE</b>) to update
              this file.

       <i>/proc/[pid]/oom_score</i> (since Linux 2.6.11)
              This file displays the current score that the kernel gives to this
              process for the purpose of selecting a process for the OOM-killer.  A
              higher score means that the process is more likely to be selected by
              the OOM-killer.  The basis for this score is the amount of memory used
              by the process, with increases (+) or decreases (-) for factors
              including:

              * whether the process creates a lot of children using <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fork.2.html">fork(2)</a> (+);

              * whether the process has been running a long time, or has used a lot
                of CPU time (-);

              * whether the process has a low nice value (i.e., &gt; 0) (+);

              * whether the process is privileged (-); and

              * whether the process is making direct hardware access (-).

              The <i>oom_score</i> also reflects the bit-shift adjustment specified by the
              <i>oom_adj</i> setting for the process.

       <i>/proc/[pid]/root</i>
              UNIX and Linux support the idea of a per-process root of the file
              system, set by the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chroot.2.html">chroot(2)</a> system call.  This file is a symbolic link
              that points to the process's root directory, and behaves as exe, fd/*,
              etc. do.

              In a multithreaded process, the contents of this symbolic link are not
              available if the main thread has already terminated (typically by
              calling <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_exit.3.html">pthread_exit(3)</a>).

       <i>/proc/[pid]/smaps</i> (since Linux 2.6.14)
              This file shows memory consumption for each of the process's mappings.
              For each of mappings there is a series of lines such as the following:

                  08048000-080bc000 r-xp 00000000 03:02 13130      /bin/bash
                  Size:               464 kB
                  Rss:                424 kB
                  Shared_Clean:       424 kB
                  Shared_Dirty:         0 kB
                  Private_Clean:        0 kB
                  Private_Dirty:        0 kB

              The first of these lines shows the same information as is displayed for
              the mapping in <i>/proc/[pid]/maps</i>.  The remaining lines show the size of
              the mapping, the amount of the mapping that is currently resident in
              RAM, the number of clean and dirty shared pages in the mapping, and the
              number of clean and dirty private pages in the mapping.

              This file is only present if the <b>CONFIG_MMU</b> kernel configuration option
              is enabled.

       <i>/proc/[pid]/stat</i>
              Status information about the process.  This is used by <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/ps.1.html">ps(1)</a>.  It is
              defined in <i>/usr/src/linux/fs/proc/array.c</i>.

              The fields, in order, with their proper <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/scanf.3.html">scanf(3)</a> format specifiers,
              are:

              <i>pid</i> %d      The process ID.

              <i>comm</i> %s     The filename of the executable, in parentheses.  This is
                          visible whether or not the executable is swapped out.

              <i>state</i> %c    One character from the string "RSDZTW" where R is running,
                          S is sleeping in an interruptible wait, D is waiting in
                          uninterruptible disk sleep, Z is zombie, T is traced or
                          stopped (on a signal), and W is paging.

              <i>ppid</i> %d     The PID of the parent.

              <i>pgrp</i> %d     The process group ID of the process.

              <i>session</i> %d  The session ID of the process.

              <i>tty_nr</i> %d   The controlling terminal of the process.  (The minor device
                          number is contained in the combination of bits 31 to 20 and
                          7 to 0; the major device number is in bits 15 to 8.)

              <i>tpgid</i> %d    The ID of the foreground process group of the controlling
                          terminal of the process.

              <i>flags</i> %u (%lu before Linux 2.6.22)
                          The kernel flags word of the process.  For bit meanings,
                          see the PF_* defines in <i>&lt;linux/sched.h&gt;</i>.  Details depend on
                          the kernel version.

              <i>minflt</i> %lu  The number of minor faults the process has made which have
                          not required loading a memory page from disk.

              <i>cminflt</i> %lu The number of minor faults that the process's waited-for
                          children have made.

              <i>majflt</i> %lu  The number of major faults the process has made which have
                          required loading a memory page from disk.

              <i>cmajflt</i> %lu The number of major faults that the process's waited-for
                          children have made.

              <i>utime</i> %lu   Amount of time that this process has been scheduled in user
                          mode, measured in clock ticks (divide by
                          <i>sysconf(_SC_CLK_TCK)</i>.  This includes guest time, <i>guest_time</i>
                          (time spent running a virtual CPU, see below), so that
                          applications that are not aware of the guest time field do
                          not lose that time from their calculations.

              <i>stime</i> %lu   Amount of time that this process has been scheduled in
                          kernel mode, measured in clock ticks (divide by
                          <i>sysconf(_SC_CLK_TCK)</i>.

              <i>cutime</i> %ld  Amount of time that this process's waited-for children have
                          been scheduled in user mode, measured in clock ticks
                          (divide by <i>sysconf(_SC_CLK_TCK)</i>.  (See also <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/times.2.html">times(2)</a>.)
                          This includes guest time, <i>cguest_time</i> (time spent running a
                          virtual CPU, see below).

              <i>cstime</i> %ld  Amount of time that this process's waited-for children have
                          been scheduled in kernel mode, measured in clock ticks
                          (divide by <i>sysconf(_SC_CLK_TCK)</i>.

              <i>priority</i> %ld
                          (Explanation for Linux 2.6) For processes running a real-
                          time scheduling policy (<i>policy</i> below; see
                          <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setscheduler.2.html">sched_setscheduler(2)</a>), this is the negated scheduling
                          priority, minus one; that is, a number in the range -2 to
                          -100, corresponding to real-time priorities 1 to 99.  For
                          processes running under a non-real-time scheduling policy,
                          this is the raw nice value (<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setpriority.2.html">setpriority(2)</a>) as represented
                          in the kernel.  The kernel stores nice values as numbers in
                          the range 0 (high) to 39 (low), corresponding to the user-
                          visible nice range of -20 to 19.

                          Before Linux 2.6, this was a scaled value based on the
                          scheduler weighting given to this process.

              <i>nice</i> %ld    The nice value (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setpriority.2.html">setpriority(2)</a>), a value in the range
                          19 (low priority) to -20 (high priority).

              <i>num_threads</i> %ld
                          Number of threads in this process (since Linux 2.6).
                          Before kernel 2.6, this field was hard coded to 0 as a
                          placeholder for an earlier removed field.

              <i>itrealvalue</i> %ld
                          The time in jiffies before the next <b>SIGALRM</b> is sent to the
                          process due to an interval timer.  Since kernel 2.6.17,
                          this field is no longer maintained, and is hard coded as 0.

              <i>starttime</i> %llu (was %lu before Linux 2.6)
                          The time in jiffies the process started after system boot.

              <i>vsize</i> %lu   Virtual memory size in bytes.

              <i>rss</i> %ld     Resident Set Size: number of pages the process has in real
                          memory.  This is just the pages which count toward text,
                          data, or stack space.  This does not include pages which
                          have not been demand-loaded in, or which are swapped out.

              <i>rsslim</i> %lu  Current soft limit in bytes on the rss of the process; see
                          the description of <b>RLIMIT_RSS</b> in <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpriority.2.html">getpriority(2)</a>.

              <i>startcode</i> %lu
                          The address above which program text can run.

              <i>endcode</i> %lu The address below which program text can run.

              <i>startstack</i> %lu
                          The address of the start (i.e., bottom) of the stack.

              <i>kstkesp</i> %lu The current value of ESP (stack pointer), as found in the
                          kernel stack page for the process.

              <i>kstkeip</i> %lu The current EIP (instruction pointer).

              <i>signal</i> %lu  The bitmap of pending signals, displayed as a decimal
                          number.  Obsolete, because it does not provide information
                          on real-time signals; use <i>/proc/[pid]/status</i> instead.

              <i>blocked</i> %lu The bitmap of blocked signals, displayed as a decimal
                          number.  Obsolete, because it does not provide information
                          on real-time signals; use <i>/proc/[pid]/status</i> instead.

              <i>sigignore</i> %lu
                          The bitmap of ignored signals, displayed as a decimal
                          number.  Obsolete, because it does not provide information
                          on real-time signals; use <i>/proc/[pid]/status</i> instead.

              <i>sigcatch</i> %lu
                          The bitmap of caught signals, displayed as a decimal
                          number.  Obsolete, because it does not provide information
                          on real-time signals; use <i>/proc/[pid]/status</i> instead.

              <i>wchan</i> %lu   This is the "channel" in which the process is waiting.  It
                          is the address of a system call, and can be looked up in a
                          namelist if you need a textual name.  (If you have an up-
                          to-date <i>/etc/psdatabase</i>, then try <i>ps</i> <i>-l</i> to see the WCHAN
                          field in action.)

              <i>nswap</i> %lu   Number of pages swapped (not maintained).

              <i>cnswap</i> %lu  Cumulative <i>nswap</i> for child processes (not maintained).

              <i>exit_signal</i> %d (since Linux 2.1.22)
                          Signal to be sent to parent when we die.

              <i>processor</i> %d (since Linux 2.2.8)
                          CPU number last executed on.

              <i>rt_priority</i> %u (since Linux 2.5.19; was %lu before Linux 2.6.22)
                          Real-time scheduling priority, a number in the range 1 to
                          99 for processes scheduled under a real-time policy, or 0,
                          for non-real-time processes (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setscheduler.2.html">sched_setscheduler(2)</a>).

              <i>policy</i> %u (since Linux 2.5.19; was %lu before Linux 2.6.22)
                          Scheduling policy (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setscheduler.2.html">sched_setscheduler(2)</a>).  Decode
                          using the SCHED_* constants in <i>linux/sched.h</i>.

              <i>delayacct_blkio_ticks</i> %llu (since Linux 2.6.18)
                          Aggregated block I/O delays, measured in clock ticks
                          (centiseconds).

              <i>guest_time</i> %lu (since Linux 2.6.24)
                          Guest time of the process (time spent running a virtual CPU
                          for a guest operating system), measured in clock ticks
                          (divide by <i>sysconf(_SC_CLK_TCK)</i>.

              <i>cguest_time</i> %ld (since Linux 2.6.24)
                          Guest time of the process's children, measured in clock
                          ticks (divide by <i>sysconf(_SC_CLK_TCK)</i>.

       <i>/proc/[pid]/statm</i>
              Provides information about memory usage, measured in pages.  The
              columns are:

                  size       total program size
                             (same as VmSize in <i>/proc/[pid]/status</i>)
                  resident   resident set size
                             (same as VmRSS in <i>/proc/[pid]/status</i>)
                  share      shared pages (from shared mappings)
                  text       text (code)
                  lib        library (unused in Linux 2.6)
                  data       data + stack
                  dt         dirty pages (unused in Linux 2.6)

       <i>/proc/[pid]/status</i>
              Provides much of the information in <i>/proc/[pid]/stat</i> and
              <i>/proc/[pid]/statm</i> in a format that's easier for humans to parse.
              Here's an example:

                  $ <b>cat</b> <b>/proc/$$/status</b>
                  Name:   bash
                  State:  S (sleeping)
                  Tgid:   3515
                  Pid:    3515
                  PPid:   3452
                  TracerPid:      0
                  Uid:    1000    1000    1000    1000
                  Gid:    100     100     100     100
                  FDSize: 256
                  Groups: 16 33 100
                  VmPeak:     9136 kB
                  VmSize:     7896 kB
                  VmLck:         0 kB
                  VmHWM:      7572 kB
                  VmRSS:      6316 kB
                  VmData:     5224 kB
                  VmStk:        88 kB
                  VmExe:       572 kB
                  VmLib:      1708 kB
                  VmPTE:        20 kB
                  Threads:        1
                  SigQ:   0/3067
                  SigPnd: 0000000000000000
                  ShdPnd: 0000000000000000
                  SigBlk: 0000000000010000
                  SigIgn: 0000000000384004
                  SigCgt: 000000004b813efb
                  CapInh: 0000000000000000
                  CapPrm: 0000000000000000
                  CapEff: 0000000000000000
                  CapBnd: ffffffffffffffff
                  Cpus_allowed:   00000001
                  Cpus_allowed_list:      0
                  Mems_allowed:   1
                  Mems_allowed_list:      0
                  voluntary_ctxt_switches:        150
                  nonvoluntary_ctxt_switches:     545

              The fields are as follows:

              * <i>Name</i>: Command run by this process.

              * <i>State</i>: Current state of the process.  One of "R (running)", "S
                (sleeping)", "D (disk sleep)", "T (stopped)", "T (tracing stop)", "Z
                (zombie)", or "X (dead)".

              * <i>Tgid</i>: Thread group ID (i.e., Process ID).

              * <i>Pid</i>: Thread ID (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/gettid.2.html">gettid(2)</a>).

              * <i>TracerPid</i>: PID of process tracing this process (0 if not being
                traced).

              * <i>Uid</i>, <i>Gid</i>: Real, effective, saved set, and file system UIDs (GIDs).

              * <i>FDSize</i>: Number of file descriptor slots currently allocated.

              * <i>Groups</i>: Supplementary group list.

              * <i>VmPeak</i>: Peak virtual memory size.

              * <i>VmSize</i>: Virtual memory size.

              * <i>VmLck</i>: Locked memory size (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/mlock.3.html">mlock(3)</a>).

              * <i>VmHWM</i>: Peak resident set size ("high water mark").

              * <i>VmRSS</i>: Resident set size.

              * <i>VmData</i>, <i>VmStk</i>, <i>VmExe</i>: Size of data, stack, and text segments.

              * <i>VmLib</i>: Shared library code size.

              * <i>VmPTE</i>: Page table entries size (since Linux 2.6.10).

              * <i>Threads</i>: Number of threads in process containing this thread.

              * <i>SigPnd</i>, <i>ShdPnd</i>: Number of signals pending for thread and for process
                as a whole (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/pthreads.7.html">pthreads(7)</a> and <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/signal.7.html">signal(7)</a>).

              * <i>SigBlk</i>, <i>SigIgn</i>, <i>SigCgt</i>: Masks indicating signals being blocked,
                ignored, and caught (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/signal.7.html">signal(7)</a>).

              * <i>CapInh</i>, <i>CapPrm</i>, <i>CapEff</i>: Masks of capabilities enabled in inheritable,
                permitted, and effective sets (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/capabilities.7.html">capabilities(7)</a>).

              * <i>CapBnd</i>: Capability Bounding set (since kernel 2.6.26, see
                <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/capabilities.7.html">capabilities(7)</a>).

              * <i>Cpus_allowed</i>: Mask of CPUs on which this process may run (since Linux
                2.6.24, see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">cpuset(7)</a>).

              * <i>Cpus_allowed_list</i>: Same as previous, but in "list format" (since
                Linux 2.6.26, see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">cpuset(7)</a>).

              * <i>Mems_allowed</i>: Mask of memory nodes allowed to this process (since
                Linux 2.6.24, see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">cpuset(7)</a>).

              * <i>Mems_allowed_list</i>: Same as previous, but in "list format" (since
                Linux 2.6.26, see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">cpuset(7)</a>).

              * <i>voluntary_context_switches</i>, <i>nonvoluntary_context_switches</i>: Number of
                voluntary and involuntary context switches (since Linux 2.6.23).

       <i>/proc/[pid]/task</i> (since Linux 2.6.0-test6)
              This is a directory that contains one subdirectory for each thread in
              the process.  The name of each subdirectory is the numerical thread ID
              (<i>[tid]</i>) of the thread (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/gettid.2.html">gettid(2)</a>).  Within each of these
              subdirectories, there is a set of files with the same names and
              contents as under the <i>/proc/[pid]</i> directories.  For attributes that are
              shared by all threads, the contents for each of the files under the
              <i>task/[tid]</i> subdirectories will be the same as in the corresponding file
              in the parent <i>/proc/[pid]</i> directory (e.g., in a multithreaded process,
              all of the <i>task/[tid]/cwd</i> files will have the same value as the
              <i>/proc/[pid]/cwd</i> file in the parent directory, since all of the threads
              in a process share a working directory).  For attributes that are
              distinct for each thread, the corresponding files under <i>task/[tid]</i> may
              have different values (e.g., various fields in each of the
              <i>task/[tid]/status</i> files may be different for each thread).

              In a multithreaded process, the contents of the <i>/proc/[pid]/task</i>
              directory are not available if the main thread has already terminated
              (typically by calling <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_exit.3.html">pthread_exit(3)</a>).

       <i>/proc/apm</i>
              Advanced power management version and battery information when
              <b>CONFIG_APM</b> is defined at kernel compilation time.

       <i>/proc/bus</i>
              Contains subdirectories for installed busses.

       <i>/proc/bus/pccard</i>
              Subdirectory for PCMCIA devices when <b>CONFIG_PCMCIA</b> is set at kernel
              compilation time.

       <i>/proc/bus/pccard/drivers</i>

       <i>/proc/bus/pci</i>
              Contains various bus subdirectories and pseudo-files containing
              information about PCI busses, installed devices, and device drivers.
              Some of these files are not ASCII.

       <i>/proc/bus/pci/devices</i>
              Information about PCI devices.  They may be accessed through <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/lspci.8.html">lspci(8)</a>
              and <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/setpci.8.html">setpci(8)</a>.

       <i>/proc/cmdline</i>
              Arguments passed to the Linux kernel at boot time.  Often done via a
              boot manager such as <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/lilo.8.html">lilo(8)</a> or <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/grub.8.html">grub(8)</a>.

       <i>/proc/config.gz</i> (since Linux 2.6)
              This file exposes the configuration options that were used to build the
              currently running kernel, in the same format as they would be shown in
              the <i>.config</i> file that resulted when configuring the kernel (using <i>make</i>
              <i>xconfig</i>, <i>make</i> <i>config</i>, or similar).  The file contents are compressed;
              view or search them using <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/zcat.1.html">zcat(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/zgrep.1.html">zgrep(1)</a>, etc.  As long as no
              changes have been made to the following file, the contents of
              <i>/proc/config.gz</i> are the same as those provided by :

                  cat /lib/modules/$(uname -r)/build/.config

              <i>/proc/config.gz</i> is only provided if the kernel is configured with
              <b>CONFIG_IKCONFIG_PROC</b>.

       <i>/proc/cpuinfo</i>
              This is a collection of CPU and system architecture dependent items,
              for each supported architecture a different list.  Two common entries
              are <i>processor</i> which gives CPU number and <i>bogomips</i>; a system constant
              that is calculated during kernel initialization.  SMP machines have
              information for each CPU.

       <i>/proc/devices</i>
              Text listing of major numbers and device groups.  This can be used by
              MAKEDEV scripts for consistency with the kernel.

       <i>/proc/diskstats</i> (since Linux 2.5.69)
              This file contains disk I/O statistics for each disk device.  See the
              kernel source file <i>Documentation/iostats.txt</i> for further information.

       <i>/proc/dma</i>
              This is a list of the registered <i>ISA</i> DMA (direct memory access)
              channels in use.

       <i>/proc/driver</i>
              Empty subdirectory.

       <i>/proc/execdomains</i>
              List of the execution domains (ABI personalities).

       <i>/proc/fb</i>
              Frame buffer information when <b>CONFIG_FB</b> is defined during kernel
              compilation.

       <i>/proc/filesystems</i>
              A text listing of the file systems which are supported by the kernel,
              namely file systems which were compiled into the kernel or whose kernel
              modules are currently loaded.  (See also <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/filesystems.5.html">filesystems(5)</a>.)  If a file
              system is marked with "nodev", this means that it does not require a
              block device to be mounted (e.g., virtual file system, network file
              system).

              Incidentally, this file may be used by <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/mount.8.html">mount(8)</a> when no file system is
              specified and it didn't manage to determine the file system type.  Then
              file systems contained in this file are tried (excepted those that are
              marked with "nodev").

       <i>/proc/fs</i>
              Empty subdirectory.

       <i>/proc/ide</i>
              This directory exists on systems with the IDE bus.  There are
              directories for each IDE channel and attached device.  Files include:

                  cache              buffer size in KB
                  capacity           number of sectors
                  driver             driver version
                  geometry           physical and logical geometry
                  identify           in hexadecimal
                  media              media type
                  model              manufacturer's model number
                  settings           drive settings
                  smart_thresholds   in hexadecimal
                  smart_values       in hexadecimal

              The <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/hdparm.8.html">hdparm(8)</a> utility provides access to this information in a friendly
              format.

       <i>/proc/interrupts</i>
              This is used to record the number of interrupts per CPU per IO device.
              Since Linux 2.6.24, for the i386 and x86_64 architectures, at least,
              this also includes interrupts internal to the system (that is, not
              associated with a device as such), such as NMI (nonmaskable interrupt),
              LOC (local timer interrupt), and for SMP systems, TLB (TLB flush
              interrupt), RES (rescheduling interrupt), CAL (remote function call
              interrupt), and possibly others.  Very easy to read formatting, done in
              ASCII.

       <i>/proc/iomem</i>
              I/O memory map in Linux 2.4.

       <i>/proc/ioports</i>
              This is a list of currently registered Input-Output port regions that
              are in use.

       <i>/proc/kallsyms</i> (since Linux 2.5.71)
              This holds the kernel exported symbol definitions used by the
              <b>modules</b>(X) tools to dynamically link and bind loadable modules.  In
              Linux 2.5.47 and earlier, a similar file with slightly different syntax
              was named <i>ksyms</i>.

       <i>/proc/kcore</i>
              This file represents the physical memory of the system and is stored in
              the ELF core file format.  With this pseudo-file, and an unstripped
              kernel (<i>/usr/src/linux/vmlinux</i>) binary, GDB can be used to examine the
              current state of any kernel data structures.

              The total length of the file is the size of physical memory (RAM) plus
              4KB.

       <i>/proc/kmsg</i>
              This file can be used instead of the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syslog.2.html">syslog(2)</a> system call to read
              kernel messages.  A process must have superuser privileges to read this
              file, and only one process should read this file.  This file should not
              be read if a syslog process is running which uses the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syslog.2.html">syslog(2)</a> system
              call facility to log kernel messages.

              Information in this file is retrieved with the <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/dmesg.1.html">dmesg(1)</a> program.

       <i>/proc/ksyms</i> (Linux 1.1.23-2.5.47)
              See <i>/proc/kallsyms</i>.

       <i>/proc/loadavg</i>
              The first three fields in this file are load average figures giving the
              number of jobs in the run queue (state R) or waiting for disk I/O
              (state D) averaged over 1, 5, and 15 minutes.  They are the same as the
              load average numbers given by <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/uptime.1.html">uptime(1)</a> and other programs.  The fourth
              field consists of two numbers separated by a slash (/).  The first of
              these is the number of currently executing kernel scheduling entities
              (processes, threads); this will be less than or equal to the number of
              CPUs.  The value after the slash is the number of kernel scheduling
              entities that currently exist on the system.  The fifth field is the
              PID of the process that was most recently created on the system.

       <i>/proc/locks</i>
              This file shows current file locks (<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/flock.2.html">flock(2)</a> and <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">fcntl(2)</a>) and leases
              (<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">fcntl(2)</a>).

       <i>/proc/malloc</i> (only up to and including Linux 2.2)
              This file is only present if <b>CONFIG_DEBUG_MALLOC</b> was defined during
              compilation.

       <i>/proc/meminfo</i>
              This file reports statistics about memory usage on the system.  It is
              used by <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/free.1.html">free(1)</a> to report the amount of free and used memory (both
              physical and swap) on the system as well as the shared memory and
              buffers used by the kernel.

       <i>/proc/modules</i>
              A text list of the modules that have been loaded by the system.  See
              also <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/lsmod.8.html">lsmod(8)</a>.

       <i>/proc/mounts</i>
              Before kernel 2.4.19, this file was a list of all the file systems
              currently mounted on the system.  With the introduction of per-process
              mount namespaces in Linux 2.4.19, this file became a link to
              <i>/proc/self/mounts</i>, which lists the mount points of the process's own
              mount namespace.  The format of this file is documented in <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/fstab.5.html">fstab(5)</a>.

       <i>/proc/mtrr</i>
              Memory Type Range Registers.  See the kernel source file
              <i>Documentation/mtrr.txt</i> for details.

       <i>/proc/net</i>
              various net pseudo-files, all of which give the status of some part of
              the networking layer.  These files contain ASCII structures and are,
              therefore, readable with <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/cat.1.html">cat(1)</a>.  However, the standard <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/netstat.8.html">netstat(8)</a>
              suite provides much cleaner access to these files.

       <i>/proc/net/arp</i>
              This holds an ASCII readable dump of the kernel ARP table used for
              address resolutions.  It will show both dynamically learned and
              preprogrammed ARP entries.  The format is:

        IP address     HW type   Flags     HW address          Mask   Device
        192.168.0.50   0x1       0x2       00:50:BF:25:68:F3   *      eth0
        192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0

              Here "IP address" is the IPv4 address of the machine and the "HW type"
              is the hardware type of the address from RFC 826.  The flags are the
              internal flags of the ARP structure (as defined in
              <i>/usr/include/linux/if_arp.h</i>) and the "HW address" is the data link
              layer mapping for that IP address if it is known.

       <i>/proc/net/dev</i>
              The dev pseudo-file contains network device status information.  This
              gives the number of received and sent packets, the number of errors and
              collisions and other basic statistics.  These are used by the
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/ifconfig.8.html">ifconfig(8)</a> program to report device status.  The format is:

 Inter-|   Receive                                                |  Transmit
  face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
     lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
   eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
   ppp0: 1622270    5552    1    0    0     0          0         0   354130    5669    0    0    0     0       0          0
   tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0

       <i>/proc/net/dev_mcast</i>
              Defined in <i>/usr/src/linux/net/core/dev_mcast.c</i>:
                   indx interface_name  dmi_u dmi_g dmi_address
                   2    eth0            1     0     01005e000001
                   3    eth1            1     0     01005e000001
                   4    eth2            1     0     01005e000001

       <i>/proc/net/igmp</i>
              Internet Group Management Protocol.  Defined in
              <i>/usr/src/linux/net/core/igmp.c</i>.

       <i>/proc/net/rarp</i>
              This file uses the same format as the <i>arp</i> file and contains the current
              reverse mapping database used to provide <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/rarp.8.html">rarp(8)</a> reverse address lookup
              services.  If RARP is not configured into the kernel, this file will
              not be present.

       <i>/proc/net/raw</i>
              Holds a dump of the RAW socket table.  Much of the information is not
              of use apart from debugging.  The "sl" value is the kernel hash slot
              for the socket, the "local_address" is the local address and protocol
              number pair.  "St" is the internal status of the socket.  The
              "tx_queue" and "rx_queue" are the outgoing and incoming data queue in
              terms of kernel memory usage.  The "tr", "tm-&gt;when", and "rexmits"
              fields are not used by RAW.  The "uid" field holds the effective UID of
              the creator of the socket.

       <i>/proc/net/snmp</i>
              This file holds the ASCII data needed for the IP, ICMP, TCP, and UDP
              management information bases for an SNMP agent.

       <i>/proc/net/tcp</i>
              Holds a dump of the TCP socket table.  Much of the information is not
              of use apart from debugging.  The "sl" value is the kernel hash slot
              for the socket, the "local_address" is the local address and port
              number pair.  The "rem_address" is the remote address and port number
              pair (if connected).  "St" is the internal status of the socket.  The
              "tx_queue" and "rx_queue" are the outgoing and incoming data queue in
              terms of kernel memory usage.  The "tr", "tm-&gt;when", and "rexmits"
              fields hold internal information of the kernel socket state and are
              only useful for debugging.  The "uid" field holds the effective UID of
              the creator of the socket.

       <i>/proc/net/udp</i>
              Holds a dump of the UDP socket table.  Much of the information is not
              of use apart from debugging.  The "sl" value is the kernel hash slot
              for the socket, the "local_address" is the local address and port
              number pair.  The "rem_address" is the remote address and port number
              pair (if connected). "St" is the internal status of the socket.  The
              "tx_queue" and "rx_queue" are the outgoing and incoming data queue in
              terms of kernel memory usage.  The "tr", "tm-&gt;when", and "rexmits"
              fields are not used by UDP.  The "uid" field holds the effective UID of
              the creator of the socket.  The format is:

 sl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm-&gt;when uid
  1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001 01:000071BA 00000000 0
  1: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 6F000100 0
  1: 00000000:0201 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0

       <i>/proc/net/unix</i>
              Lists the UNIX domain sockets present within the system and their
              status.  The format is:
              Num RefCount Protocol Flags    Type St Path
               0: 00000002 00000000 00000000 0001 03
               1: 00000001 00000000 00010000 0001 01 /dev/printer

              Here "Num" is the kernel table slot number, "RefCount" is the number of
              users of the socket, "Protocol" is currently always 0, "Flags"
              represent the internal kernel flags holding the status of the socket.
              Currently, type is always "1" (UNIX domain datagram sockets are not yet
              supported in the kernel).  "St" is the internal state of the socket and
              Path is the bound path (if any) of the socket.

       <i>/proc/partitions</i>
              Contains major and minor numbers of each partition as well as number of
              blocks and partition name.

       <i>/proc/pci</i>
              This is a listing of all PCI devices found during kernel initialization
              and their configuration.

              This file has been deprecated in favor of a new <i>/proc</i> interface for PCI
              (<i>/proc/bus/pci</i>).  It became optional in Linux 2.2 (available with
              <b>CONFIG_PCI_OLD_PROC</b> set at kernel compilation).  It became once more
              nonoptionally enabled in Linux 2.4.  Next, it was deprecated in Linux
              2.6 (still available with <b>CONFIG_PCI_LEGACY_PROC</b> set), and finally
              removed altogether since Linux 2.6.17.

       <i>/proc/scsi</i>
              A directory with the <i>scsi</i> mid-level pseudo-file and various SCSI low-
              level driver directories, which contain a file for each SCSI host in
              this system, all of which give the status of some part of the SCSI IO
              subsystem.  These files contain ASCII structures and are, therefore,
              readable with <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/cat.1.html">cat(1)</a>.

              You can also write to some of the files to reconfigure the subsystem or
              switch certain features on or off.

       <i>/proc/scsi/scsi</i>
              This is a listing of all SCSI devices known to the kernel.  The listing
              is similar to the one seen during bootup.  scsi currently supports only
              the <i>add-single-device</i> command which allows root to add a hotplugged
              device to the list of known devices.

              The command

                  echo 'scsi add-single-device 1 0 5 0' &gt; /proc/scsi/scsi

              will cause host scsi1 to scan on SCSI channel 0 for a device on ID 5
              LUN 0.  If there is already a device known on this address or the
              address is invalid, an error will be returned.

       <i>/proc/scsi/[drivername]</i>
              <i>[drivername]</i> can currently be NCR53c7xx, aha152x, aha1542, aha1740,
              aic7xxx, buslogic, eata_dma, eata_pio, fdomain, in2000, pas16, qlogic,
              scsi_debug, seagate, t128, u15-24f, ultrastore, or wd7000.  These
              directories show up for all drivers that registered at least one SCSI
              HBA.  Every directory contains one file per registered host.  Every
              host-file is named after the number the host was assigned during
              initialization.

              Reading these files will usually show driver and host configuration,
              statistics, etc.

              Writing to these files allows different things on different hosts.  For
              example, with the <i>latency</i> and <i>nolatency</i> commands, root can switch on
              and off command latency measurement code in the eata_dma driver.  With
              the <i>lockup</i> and <i>unlock</i> commands, root can control bus lockups simulated
              by the scsi_debug driver.

       <i>/proc/self</i>
              This directory refers to the process accessing the <i>/proc</i> file system,
              and is identical to the <i>/proc</i> directory named by the process ID of the
              same process.

       <i>/proc/slabinfo</i>
              Information about kernel caches.  Since Linux 2.6.16 this file is only
              present if the <b>CONFIG_SLAB</b> kernel configuration option is enabled.  The
              columns in <i>/proc/slabinfo</i> are:

                  cache-name
                  num-active-objs
                  total-objs
                  object-size
                  num-active-slabs
                  total-slabs
                  num-pages-per-slab

              See <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/slabinfo.5.html">slabinfo(5)</a> for details.

       <i>/proc/stat</i>
              kernel/system statistics.  Varies with architecture.  Common entries
              include:

              <i>cpu</i>  <i>3357</i> <i>0</i> <i>4313</i> <i>1362393</i>
                     The amount of time, measured in units of USER_HZ (1/100ths of a
                     second on most architectures, use <i>sysconf(_SC_CLK_TCK)</i> to obtain
                     the right value), that the system spent in user mode, user mode
                     with low priority (nice), system mode, and the idle task,
                     respectively.  The last value should be USER_HZ times the second
                     entry in the uptime pseudo-file.

                     In Linux 2.6 this line includes three additional columns: <i>iowait</i>
                     - time waiting for I/O to complete (since 2.5.41); <i>irq</i> - time
                     servicing interrupts (since 2.6.0-test4); <i>softirq</i> - time
                     servicing softirqs (since 2.6.0-test4).

                     Since Linux 2.6.11, there is an eighth column, <i>steal</i> - stolen
                     time, which is the time spent in other operating systems when
                     running in a virtualized environment

                     Since Linux 2.6.24, there is a ninth column, <i>guest</i>, which is the
                     time spent running a virtual CPU for guest operating systems
                     under the control of the Linux kernel.

              <i>page</i> <i>5741</i> <i>1808</i>
                     The number of pages the system paged in and the number that were
                     paged out (from disk).

              <i>swap</i> <i>1</i> <i>0</i>
                     The number of swap pages that have been brought in and out.

              <i>intr</i> <i>1462898</i>
                     This line shows counts of interrupts serviced since boot time,
                     for each of the possible system interrupts.  The first column is
                     the total of all interrupts serviced; each subsequent column is
                     the total for a particular interrupt.

              <i>disk_io:</i> <i>(2,0):(31,30,5764,1,2)</i> <i>(3,0):</i>...
                     (major,disk_idx):(noinfo, read_io_ops, blks_read, write_io_ops,
                     blks_written)
                     (Linux 2.4 only)

              <i>ctxt</i> <i>115315</i>
                     The number of context switches that the system underwent.

              <i>btime</i> <i>769041601</i>
                     boot time, in seconds since the Epoch, 1970-01-01 00:00:00 +0000
                     (UTC).

              <i>processes</i> <i>86031</i>
                     Number of forks since boot.

              <i>procs_running</i> <i>6</i>
                     Number of processes in runnable state.  (Linux 2.5.45 onward.)

              <i>procs_blocked</i> <i>2</i>
                     Number of processes blocked waiting for I/O to complete.  (Linux
                     2.5.45 onward.)

       <i>/proc/swaps</i>
              Swap areas in use.  See also <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/swapon.8.html">swapon(8)</a>.

       <i>/proc/sys</i>
              This directory (present since 1.3.57) contains a number of files and
              subdirectories corresponding to kernel variables.  These variables can
              be read and sometimes modified using the <i>/proc</i> file system, and the
              (deprecated) <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sysctl.2.html">sysctl(2)</a> system call.

       <i>/proc/sys/abi</i> (since Linux 2.4.10)
              This directory may contain files with application binary information.
              See the kernel source file <i>Documentation/sysctl/abi.txt</i> for more
              information.

       <i>/proc/sys/debug</i>
              This directory may be empty.

       <i>/proc/sys/dev</i>
              This directory contains device-specific information (e.g.,
              <i>dev/cdrom/info</i>).  On some systems, it may be empty.

       <i>/proc/sys/fs</i>
              This directory contains the files and subdirectories for kernel
              variables related to file systems.

       <i>/proc/sys/fs/binfmt_misc</i>
              Documentation for files in this directory can be found in the kernel
              sources in <i>Documentation/binfmt_misc.txt</i>.

       <i>/proc/sys/fs/dentry-state</i> (since Linux 2.2)
              This file contains information about the status of the directory cache
              (dcache).  The file contains six numbers, <i>nr_dentry</i>, <i>nr_unused</i>,
              <i>age_limit</i> (age in seconds), <i>want_pages</i> (pages requested by system) and
              two dummy values.

              * <i>nr_dentry</i> is the number of allocated dentries (dcache entries).  This
                field is unused in Linux 2.2.

              * <i>nr_unused</i> is the number of unused dentries.

              * <i>age_limit</i> is the age in seconds after which dcache entries can be
                reclaimed when memory is short.

              * <i>want_pages</i> is nonzero when the kernel has called
                shrink_dcache_pages() and the dcache isn't pruned yet.

       <i>/proc/sys/fs/dir-notify-enable</i>
              This file can be used to disable or enable the <i>dnotify</i> interface
              described in <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">fcntl(2)</a> on a system-wide basis.  A value of 0 in this
              file disables the interface, and a value of 1 enables it.

       <i>/proc/sys/fs/dquot-max</i>
              This file shows the maximum number of cached disk quota entries.  On
              some (2.4) systems, it is not present.  If the number of free cached
              disk quota entries is very low and you have some awesome number of
              simultaneous system users, you might want to raise the limit.

       <i>/proc/sys/fs/dquot-nr</i>
              This file shows the number of allocated disk quota entries and the
              number of free disk quota entries.

       <i>/proc/sys/fs/epoll</i> (since Linux 2.6.28)
              This directory contains the file <i>max_user_watches</i>, which can be used to
              limit the amount of kernel memory consumed by the <i>epoll</i> interface.  For
              further details, see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/epoll.7.html">epoll(7)</a>.

       <i>/proc/sys/fs/file-max</i>
              This file defines a system-wide limit on the number of open files for
              all processes.  (See also <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setrlimit.2.html">setrlimit(2)</a>, which can be used by a process
              to set the per-process limit, <b>RLIMIT_NOFILE</b>, on the number of files it
              may open.)  If you get lots of error messages about running out of file
              handles, try increasing this value:

              echo 100000 &gt; /proc/sys/fs/file-max

              The kernel constant <b>NR_OPEN</b> imposes an upper limit on the value that
              may be placed in <i>file-max</i>.

              If you increase <i>/proc/sys/fs/file-max</i>, be sure to increase
              <i>/proc/sys/fs/inode-max</i> to 3-4 times the new value of <i>/proc/sys/fs/file-</i>
              <i>max</i>, or you will run out of inodes.

       <i>/proc/sys/fs/file-nr</i>
              This (read-only) file gives the number of files presently opened.  It
              contains three numbers: the number of allocated file handles; the
              number of free file handles; and the maximum number of file handles.
              The kernel allocates file handles dynamically, but it doesn't free them
              again.  If the number of allocated files is close to the maximum, you
              should consider increasing the maximum.  When the number of free file
              handles is large, you've encountered a peak in your usage of file
              handles and you probably don't need to increase the maximum.

       <i>/proc/sys/fs/inode-max</i>
              This file contains the maximum number of in-memory inodes.  On some
              (2.4) systems, it may not be present.  This value should be 3-4 times
              larger than the value in <i>file-max</i>, since <i>stdin</i>, <i>stdout</i> and network
              sockets also need an inode to handle them.  When you regularly run out
              of inodes, you need to increase this value.

       <i>/proc/sys/fs/inode-nr</i>
              This file contains the first two values from <i>inode-state</i>.

       <i>/proc/sys/fs/inode-state</i>
              This file contains seven numbers: <i>nr_inodes</i>, <i>nr_free_inodes</i>, <i>preshrink</i>,
              and four dummy values.  <i>nr_inodes</i> is the number of inodes the system
              has allocated.  This can be slightly more than <i>inode-max</i> because Linux
              allocates them one page full at a time.  <i>nr_free_inodes</i> represents the
              number of free inodes.  <i>preshrink</i> is nonzero when the <i>nr_inodes</i> &gt;
              <i>inode-max</i> and the system needs to prune the inode list instead of
              allocating more.

       <i>/proc/sys/fs/inotify</i> (since Linux 2.6.13)
              This directory contains files <i>max_queued_events</i>, <i>max_user_instances</i>,
              and <i>max_user_watches</i>, that can be used to limit the amount of kernel
              memory consumed by the <i>inotify</i> interface.  For further details, see
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/inotify.7.html">inotify(7)</a>.

       <i>/proc/sys/fs/lease-break-time</i>
              This file specifies the grace period that the kernel grants to a
              process holding a file lease (<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">fcntl(2)</a>) after it has sent a signal to
              that process notifying it that another process is waiting to open the
              file.  If the lease holder does not remove or downgrade the lease
              within this grace period, the kernel forcibly breaks the lease.

       <i>/proc/sys/fs/leases-enable</i>
              This file can be used to enable or disable file leases (<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">fcntl(2)</a>) on a
              system-wide basis.  If this file contains the value 0, leases are
              disabled.  A nonzero value enables leases.

       <i>/proc/sys/fs/mqueue</i> (since Linux 2.6.6)
              This directory contains files <i>msg_max</i>, <i>msgsize_max</i>, and <i>queues_max</i>,
              controlling the resources used by POSIX message queues.  See
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/mq_overview.7.html">mq_overview(7)</a> for details.

       <i>/proc/sys/fs/overflowgid</i> and <i>/proc/sys/fs/overflowuid</i>
              These files allow you to change the value of the fixed UID and GID.
              The default is 65534.  Some file systems only support 16-bit UIDs and
              GIDs, although in Linux UIDs and GIDs are 32 bits.  When one of these
              file systems is mounted with writes enabled, any UID or GID that would
              exceed 65535 is translated to the overflow value before being written
              to disk.

       <i>/proc/sys/fs/pipe-max-size</i> (since Linux 2.6.35)
              The value in this file defines an upper limit for raising the capacity
              of a pipe using the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">fcntl(2)</a> <b>F_SETPIPE_SZ</b> operation.  This limit
              applies only to unprivileged processes.  The default value for this
              file is 1,048,576.  The value assigned to this file may be rounded
              upward, to reflect the value actually employed for a convenient
              implementation.  To determine the rounded-up value, display the
              contents of this file after assigning a value to it.  The minimum value
              that can be assigned to this file is the system page size.

       <i>/proc/sys/fs/suid_dumpable</i> (since Linux 2.6.13)
              The value in this file determines whether core dump files are produced
              for set-user-ID or otherwise protected/tainted binaries.  Three
              different integer values can be specified:

              <i>0</i> <i>(default)</i> This provides the traditional (pre-Linux 2.6.13) behavior.
              A core dump will not be produced for a process which has changed
              credentials (by calling <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/seteuid.2.html">seteuid(2)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgid.2.html">setgid(2)</a>, or similar, or by
              executing a set-user-ID or set-group-ID program) or whose binary does
              not have read permission enabled.

              <i>1</i> <i>("debug")</i> All processes dump core when possible.  The core dump is
              owned by the file system user ID of the dumping process and no security
              is applied.  This is intended for system debugging situations only.
              Ptrace is unchecked.

              <i>2</i> <i>("suidsafe")</i> Any binary which normally would not be dumped (see "0"
              above) is dumped readable by root only.  This allows the user to remove
              the core dump file but not to read it.  For security reasons core dumps
              in this mode will not overwrite one another or other files.  This mode
              is appropriate when administrators are attempting to debug problems in
              a normal environment.

       <i>/proc/sys/fs/super-max</i>
              This file controls the maximum number of superblocks, and thus the
              maximum number of mounted file systems the kernel can have.  You only
              need to increase <i>super-max</i> if you need to mount more file systems than
              the current value in <i>super-max</i> allows you to.

       <i>/proc/sys/fs/super-nr</i>
              This file contains the number of file systems currently mounted.

       <i>/proc/sys/kernel</i>
              This directory contains files controlling a range of kernel parameters,
              as described below.

       <i>/proc/sys/kernel/acct</i>
              This file contains three numbers: <i>highwater</i>, <i>lowwater</i>, and <i>frequency</i>.
              If BSD-style process accounting is enabled these values control its
              behavior.  If free space on file system where the log lives goes below
              <i>lowwater</i> percent accounting suspends.  If free space gets above
              <i>highwater</i> percent accounting resumes.  <i>frequency</i> determines how often
              the kernel checks the amount of free space (value is in seconds).
              Default values are 4, 2 and 30.  That is, suspend accounting if 2% or
              less space is free; resume it if 4% or more space is free; consider
              information about amount of free space valid for 30 seconds.

       <i>/proc/sys/kernel/cap-bound</i> (from Linux 2.2 to 2.6.24)
              This file holds the value of the kernel <i>capability</i> <i>bounding</i> <i>set</i>
              (expressed as a signed decimal number).  This set is ANDed against the
              capabilities permitted to a process during <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html">execve(2)</a>.  Starting with
              Linux 2.6.25, the system-wide capability bounding set disappeared, and
              was replaced by a per-thread bounding set; see <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/capabilities.7.html">capabilities(7)</a>.

       <i>/proc/sys/kernel/core_pattern</i>
              See <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/core.5.html">core(5)</a>.

       <i>/proc/sys/kernel/core_uses_pid</i>
              See <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/core.5.html">core(5)</a>.

       <i>/proc/sys/kernel/ctrl-alt-del</i>
              This file controls the handling of Ctrl-Alt-Del from the keyboard.
              When the value in this file is 0, Ctrl-Alt-Del is trapped and sent to
              the <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/init.8.html">init(8)</a> program to handle a graceful restart.  When the value is
              greater than zero, Linux's reaction to a Vulcan Nerve Pinch (tm) will
              be an immediate reboot, without even syncing its dirty buffers.  Note:
              when a program (like dosemu) has the keyboard in "raw" mode, the ctrl-
              alt-del is intercepted by the program before it ever reaches the kernel
              tty layer, and it's up to the program to decide what to do with it.

       <i>/proc/sys/kernel/hotplug</i>
              This file contains the path for the hotplug policy agent.  The default
              value in this file is <i>/sbin/hotplug</i>.

       <i>/proc/sys/kernel/domainname</i> and <i>/proc/sys/kernel/hostname</i>
              can be used to set the NIS/YP domainname and the hostname of your box
              in exactly the same way as the commands <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/domainname.1.html">domainname(1)</a> and <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/hostname.1.html">hostname(1)</a>,
              that is:

                  # <b>echo</b> <b>'darkstar'</b> <b>&gt;</b> <b>/proc/sys/kernel/hostname</b>
                  # <b>echo</b> <b>'mydomain'</b> <b>&gt;</b> <b>/proc/sys/kernel/domainname</b>

              has the same effect as

                  # <b>hostname</b> <b>'darkstar'</b>
                  # <b>domainname</b> <b>'mydomain'</b>

              Note, however, that the classic darkstar.frop.org has the hostname
              "darkstar" and DNS (Internet Domain Name Server) domainname "frop.org",
              not to be confused with the NIS (Network Information Service) or YP
              (Yellow Pages) domainname.  These two domain names are in general
              different.  For a detailed discussion see the <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/hostname.1.html">hostname(1)</a> man page.

       <i>/proc/sys/kernel/htab-reclaim</i>
              (PowerPC only) If this file is set to a nonzero value, the PowerPC htab
              (see kernel file <i>Documentation/powerpc/ppc_htab.txt</i>) is pruned each
              time the system hits the idle loop.

       <i>/proc/sys/kernel/l2cr</i>
              (PowerPC only) This file contains a flag that controls the L2 cache of
              G3 processor boards.  If 0, the cache is disabled.  Enabled if nonzero.

       <i>/proc/sys/kernel/modprobe</i>
              This file contains the path for the kernel module loader.  The default
              value is <i>/sbin/modprobe</i>.  The file is only present if the kernel is
              built with the <b>CONFIG_KMOD</b> option enabled.  It is described by the
              kernel source file <i>Documentation/kmod.txt</i> (only present in kernel 2.4
              and earlier).

       <i>/proc/sys/kernel/msgmax</i>
              This file defines a system-wide limit specifying the maximum number of
              bytes in a single message written on a System V message queue.

       <i>/proc/sys/kernel/msgmni</i>
              This file defines the system-wide limit on the number of message queue
              identifiers.  (This file is only present in Linux 2.4 onward.)

       <i>/proc/sys/kernel/msgmnb</i>
              This file defines a system-wide parameter used to initialize the
              <i>msg_qbytes</i> setting for subsequently created message queues.  The
              <i>msg_qbytes</i> setting specifies the maximum number of bytes that may be
              written to the message queue.

       <i>/proc/sys/kernel/ostype</i> and <i>/proc/sys/kernel/osrelease</i>
              These files give substrings of <i>/proc/version</i>.

       <i>/proc/sys/kernel/overflowgid</i> and <i>/proc/sys/kernel/overflowuid</i>
              These files duplicate the files <i>/proc/sys/fs/overflowgid</i> and
              <i>/proc/sys/fs/overflowuid</i>.

       <i>/proc/sys/kernel/panic</i>
              This file gives read/write access to the kernel variable <i>panic_timeout</i>.
              If this is zero, the kernel will loop on a panic; if nonzero it
              indicates that the kernel should autoreboot after this number of
              seconds.  When you use the software watchdog device driver, the
              recommended setting is 60.

       <i>/proc/sys/kernel/panic_on_oops</i> (since Linux 2.5.68)
              This file controls the kernel's behavior when an oops or BUG is
              encountered.  If this file contains 0, then the system tries to
              continue operation.  If it contains 1, then the system delays a few
              seconds (to give klogd time to record the oops output) and then panics.
              If the <i>/proc/sys/kernel/panic</i> file is also nonzero then the machine
              will be rebooted.

       <i>/proc/sys/kernel/pid_max</i> (since Linux 2.5.34)
              This file specifies the value at which PIDs wrap around (i.e., the
              value in this file is one greater than the maximum PID).  The default
              value for this file, 32768, results in the same range of PIDs as on
              earlier kernels.  On 32-bit platforms, 32768 is the maximum value for
              <i>pid_max</i>.  On 64-bit systems, <i>pid_max</i> can be set to any value up to 2^22
              (<b>PID_MAX_LIMIT</b>, approximately 4 million).

       <i>/proc/sys/kernel/powersave-nap</i> (PowerPC only)
              This file contains a flag.  If set, Linux-PPC will use the "nap" mode
              of powersaving, otherwise the "doze" mode will be used.

       <i>/proc/sys/kernel/printk</i>
              The four values in this file are <i>console_loglevel</i>,
              <i>default_message_loglevel</i>, <i>minimum_console_level</i>, and
              <i>default_console_loglevel</i>.  These values influence <i>printk()</i> behavior
              when printing or logging error messages.  See <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syslog.2.html">syslog(2)</a> for more info
              on the different loglevels.  Messages with a higher priority than
              <i>console_loglevel</i> will be printed to the console.  Messages without an
              explicit priority will be printed with priority <i>default_message_level</i>.
              <i>minimum_console_loglevel</i> is the minimum (highest) value to which
              <i>console_loglevel</i> can be set.  <i>default_console_loglevel</i> is the default
              value for <i>console_loglevel</i>.

       <i>/proc/sys/kernel/pty</i> (since Linux 2.6.4)
              This directory contains two files relating to the number of UNIX 98
              pseudoterminals (see <a href="http://www.kernel.org/doc/man-pages/online/pages/man4/pts.4.html">pts(4)</a>) on the system.

       <i>/proc/sys/kernel/pty/max</i>
              This file defines the maximum number of pseudoterminals.

       <i>/proc/sys/kernel/pty/nr</i>
              This read-only file indicates how many pseudoterminals are currently in
              use.

       <i>/proc/sys/kernel/random</i>
              This directory contains various parameters controlling the operation of
              the file <i>/dev/random</i>.  See <a href="http://www.kernel.org/doc/man-pages/online/pages/man4/random.4.html">random(4)</a> for further information.

       <i>/proc/sys/kernel/real-root-dev</i>
              This file is documented in the kernel source file
              <i>Documentation/initrd.txt</i>.

       <i>/proc/sys/kernel/reboot-cmd</i> (Sparc only)
              This file seems to be a way to give an argument to the SPARC ROM/Flash
              boot loader.  Maybe to tell it what to do after rebooting?

       <i>/proc/sys/kernel/rtsig-max</i>
              (Only in kernels up to and including 2.6.7; see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setrlimit.2.html">setrlimit(2)</a>) This file
              can be used to tune the maximum number of POSIX real-time (queued)
              signals that can be outstanding in the system.

       <i>/proc/sys/kernel/rtsig-nr</i>
              (Only in kernels up to and including 2.6.7.)  This file shows the
              number POSIX real-time signals currently queued.

       <i>/proc/sys/kernel/sem</i> (since Linux 2.4)
              This file contains 4 numbers defining limits for System V IPC
              semaphores.  These fields are, in order:

              SEMMSL  The maximum semaphores per semaphore set.

              SEMMNS  A system-wide limit on the number of semaphores in all
                      semaphore sets.

              SEMOPM  The maximum number of operations that may be specified in a
                      <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/semop.2.html">semop(2)</a> call.

              SEMMNI  A system-wide limit on the maximum number of semaphore
                      identifiers.

       <i>/proc/sys/kernel/sg-big-buff</i>
              This file shows the size of the generic SCSI device (sg) buffer.  You
              can't tune it just yet, but you could change it at compile time by
              editing <i>include/scsi/sg.h</i> and changing the value of <b>SG_BIG_BUFF</b>.
              However, there shouldn't be any reason to change this value.

       <i>/proc/sys/kernel/shmall</i>
              This file contains the system-wide limit on the total number of pages
              of System V shared memory.

       <i>/proc/sys/kernel/shmmax</i>
              This file can be used to query and set the run-time limit on the
              maximum (System V IPC) shared memory segment size that can be created.
              Shared memory segments up to 1GB are now supported in the kernel.  This
              value defaults to <b>SHMMAX</b>.

       <i>/proc/sys/kernel/shmmni</i>
              (available in Linux 2.4 and onward) This file specifies the system-wide
              maximum number of System V shared memory segments that can be created.

       <i>/proc/sys/kernel/sysrq</i>
              This file controls the functions allowed to be invoked by the SysRq
              key.  By default, the file contains 1 meaning that every possible SysRq
              request is allowed (in older kernel versions, SysRq was disabled by
              default, and you were required to specifically enable it at run-time,
              but this is not the case any more).  Possible values in this file are:

                 0 - disable sysrq completely
                 1 - enable all functions of sysrq
                &gt;1 - bitmask of allowed sysrq functions, as follows:
                        2 - enable control of console logging level
                        4 - enable control of keyboard (SAK, unraw)
                        8 - enable debugging dumps of processes etc.
                       16 - enable sync command
                       32 - enable remount read-only
                       64 - enable signalling of processes (term, kill, oom-kill)
                      128 - allow reboot/poweroff
                      256 - allow nicing of all real-time tasks

              This file is only present if the <b>CONFIG_MAGIC_SYSRQ</b> kernel
              configuration option is enabled.  For further details see the kernel
              source file <i>Documentation/sysrq.txt</i>.

       <i>/proc/sys/kernel/version</i>
              This file contains a string like:

                  #5 Wed Feb 25 21:49:24 MET 1998

              The "#5" means that this is the fifth kernel built from this source
              base and the date behind it indicates the time the kernel was built.

       <i>/proc/sys/kernel/threads-max</i> (since Linux 2.3.11)
              This file specifies the system-wide limit on the number of threads
              (tasks) that can be created on the system.

       <i>/proc/sys/kernel/zero-paged</i> (PowerPC only)
              This file contains a flag.  When enabled (nonzero), Linux-PPC will pre-
              zero pages in the idle loop, possibly speeding up get_free_pages.

       <i>/proc/sys/net</i>
              This directory contains networking stuff.  Explanations for some of the
              files under this directory can be found in <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/tcp.7.html">tcp(7)</a> and <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/ip.7.html">ip(7)</a>.

       <i>/proc/sys/net/core/somaxconn</i>
              This file defines a ceiling value for the <i>backlog</i> argument of
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/listen.2.html">listen(2)</a>; see the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/listen.2.html">listen(2)</a> manual page for details.

       <i>/proc/sys/proc</i>
              This directory may be empty.

       <i>/proc/sys/sunrpc</i>
              This directory supports Sun remote procedure call for network file
              system (NFS).  On some systems, it is not present.

       <i>/proc/sys/vm</i>
              This directory contains files for memory management tuning, buffer and
              cache management.

       <i>/proc/sys/vm/drop_caches</i> (since Linux 2.6.16)
              Writing to this file causes the kernel to drop clean caches, dentries
              and inodes from memory, causing that memory to become free.

              To free pagecache, use <i>echo</i> <i>1</i> <i>&gt;</i> <i>/proc/sys/vm/drop_caches</i>; to free
              dentries and inodes, use <i>echo</i> <i>2</i> <i>&gt;</i> <i>/proc/sys/vm/drop_caches</i>; to free
              pagecache, dentries and inodes, use <i>echo</i> <i>3</i> <i>&gt;</i> <i>/proc/sys/vm/drop_caches</i>.

              Because this is a nondestructive operation and dirty objects are not
              freeable, the user should run <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/sync.8.html">sync(8)</a> first.

       <i>/proc/sys/vm/legacy_va_layout</i> (since Linux 2.6.9)
              If nonzero, this disables the new 32-bit memory-mapping layout; the
              kernel will use the legacy (2.4) layout for all processes.

       <i>/proc/sys/vm/memory_failure_early_kill</i> (since Linux 2.6.32)
              Control how to kill processes when an uncorrected memory error
              (typically a 2-bit error in a memory module) that cannot be handled by
              the kernel is detected in the background by hardware.  In some cases
              (like the page still having a valid copy on disk), the kernel will
              handle the failure transparently without affecting any applications.
              But if there is no other up-to-date copy of the data, it will kill
              processes to prevent any data corruptions from propagating.

              The file has one of the following values:

              1:  Kill all processes that have the corrupted-and-not-reloadable page
                  mapped as soon as the corruption is detected.  Note this is not
                  supported for a few types of pages, like kernel internally
                  allocated data or the swap cache, but works for the majority of
                  user pages.

              0:  Only unmap the corrupted page from all processes and only kill a
                  process who tries to access it.

              The kill is performed using a <b>SIGBUS</b> signal with <i>si_code</i> set to
              <b>BUS_MCEERR_AO</b>.  Processes can handle this if they want to; see
              <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigaction.2.html">sigaction(2)</a> for more details.

              This feature is only active on architectures/platforms with advanced
              machine check handling and depends on the hardware capabilities.

              Applications can override the <i>memory_failure_early_kill</i> setting
              individually with the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/prctl.2.html">prctl(2)</a> <b>PR_MCE_KILL</b> operation.

              Only present if the kernel was configured with <b>CONFIG_MEMORY_FAILURE</b>.

       <i>/proc/sys/vm/memory_failure_recovery</i> (since Linux 2.6.32)
              Enable memory failure recovery (when supported by the platform)

              1:  Attempt recovery.

              0:  Always panic on a memory failure.

              Only present if the kernel was configured with <b>CONFIG_MEMORY_FAILURE</b>.

       <i>/proc/sys/vm/oom_dump_tasks</i> (since Linux 2.6.25)
              Enables a system-wide task dump (excluding kernel threads) to be
              produced when the kernel performs an OOM-killing.  The dump includes
              the following information for each task (thread, process): thread ID,
              real user ID, thread group ID (process ID), virtual memory size,
              resident set size, the CPU that the task is scheduled on, oom_adj score
              (see the description of <i>/proc/[pid]/oom_adj</i>), and command name.  This
              is helpful to determine why the OOM-killer was invoked and to identify
              the rogue task that caused it.

              If this contains the value zero, this information is suppressed.  On
              very large systems with thousands of tasks, it may not be feasible to
              dump the memory state information for each one.  Such systems should
              not be forced to incur a performance penalty in OOM situations when the
              information may not be desired.

              If this is set to nonzero, this information is shown whenever the OOM-
              killer actually kills a memory-hogging task.

              The default value is 0.

       <i>/proc/sys/vm/oom_kill_allocating_task</i> (since Linux 2.6.24)
              This enables or disables killing the OOM-triggering task in out-of-
              memory situations.

              If this is set to zero, the OOM-killer will scan through the entire
              tasklist and select a task based on heuristics to kill.  This normally
              selects a rogue memory-hogging task that frees up a large amount of
              memory when killed.

              If this is set to nonzero, the OOM-killer simply kills the task that
              triggered the out-of-memory condition.  This avoids a possibly
              expensive tasklist scan.

              If <i>/proc/sys/vm/panic_on_oom</i> is nonzero, it takes precedence over
              whatever value is used in <i>/proc/sys/vm/oom_kill_allocating_task</i>.

              The default value is 0.

       <i>/proc/sys/vm/overcommit_memory</i>
              This file contains the kernel virtual memory accounting mode.  Values
              are:

                     0: heuristic overcommit (this is the default)
                     1: always overcommit, never check
                     2: always check, never overcommit

              In mode 0, calls of <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html">mmap(2)</a> with <b>MAP_NORESERVE</b> are not checked, and the
              default check is very weak, leading to the risk of getting a process
              "OOM-killed".  Under Linux 2.4 any nonzero value implies mode 1.  In
              mode 2 (available since Linux 2.6), the total virtual address space on
              the system is limited to (SS + RAM*(r/100)), where SS is the size of
              the swap space, and RAM is the size of the physical memory, and r is
              the contents of the file <i>/proc/sys/vm/overcommit_ratio</i>.

       <i>/proc/sys/vm/overcommit_ratio</i>
              See the description of <i>/proc/sys/vm/overcommit_memory</i>.

       <i>/proc/sys/vm/panic_on_oom</i> (since Linux 2.6.18)
              This enables or disables a kernel panic in an out-of-memory situation.

              If this file is set to the value 0, the kernel's OOM-killer will kill
              some rogue process.  Usually, the OOM-killer is able to kill a rogue
              process and the system will survive.

              If this file is set to the value 1, then the kernel normally panics
              when out-of-memory happens.  However, if a process limits allocations
              to certain nodes using memory policies (<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mbind.2.html">mbind(2)</a> <b>MPOL_BIND</b>) or cpusets
              (<a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">cpuset(7)</a>) and those nodes reach memory exhaustion status, one process
              may be killed by the OOM-killer.  No panic occurs in this case: because
              other nodes' memory may be free, this means the system as a whole may
              not have reached an out-of-memory situation yet.

              If this file is set to the value 2, the kernel always panics when an
              out-of-memory condition occurs.

              The default value is 0.  1 and 2 are for failover of clustering.
              Select either according to your policy of failover.

       <i>/proc/sys/vm/swappiness</i>
              The value in this file controls how aggressively the kernel will swap
              memory pages.  Higher values increase aggressiveness, lower values
              decrease aggressiveness.  The default value is 60.

       <i>/proc/sysrq-trigger</i> (since Linux 2.4.21)
              Writing a character to this file triggers the same SysRq function as
              typing ALT-SysRq-&lt;character&gt; (see the description of
              <i>/proc/sys/kernel/sysrq</i>).  This file is normally only writable by <i>root</i>.
              For further details see the kernel source file <i>Documentation/sysrq.txt</i>.

       <i>/proc/sysvipc</i>
              Subdirectory containing the pseudo-files <i>msg</i>, <i>sem</i> and <i>shm</i>.  These files
              list the System V Interprocess Communication (IPC) objects
              (respectively: message queues, semaphores, and shared memory) that
              currently exist on the system, providing similar information to that
              available via <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/ipcs.1.html">ipcs(1)</a>.  These files have headers and are formatted (one
              IPC object per line) for easy understanding.  <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/svipc.7.html">svipc(7)</a> provides further
              background on the information shown by these files.

       <i>/proc/tty</i>
              Subdirectory containing the pseudo-files and subdirectories for tty
              drivers and line disciplines.

       <i>/proc/uptime</i>
              This file contains two numbers: the uptime of the system (seconds), and
              the amount of time spent in idle process (seconds).

       <i>/proc/version</i>
              This string identifies the kernel version that is currently running.
              It includes the contents of <i>/proc/sys/kernel/ostype</i>,
              <i>/proc/sys/kernel/osrelease</i> and <i>/proc/sys/kernel/version</i>.  For example:
            Linux version 1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994

       <i>/proc/vmstat</i> (since Linux 2.6)
              This file displays various virtual memory statistics.

       <i>/proc/zoneinfo</i> (since Linux 2.6.13)
              This file display information about memory zones.  This is useful for
              analyzing virtual memory behavior.
</pre>
<a name="NOTES" href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#NOTES"></a><h2>NOTES  &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#section_dir"><font size="-2">top</font></a></h2><pre>       Many strings (i.e., the environment and command line) are in the internal
       format, with subfields terminated by null bytes ('\0'), so you may find that
       things are more readable if you use <i>od</i> <i>-c</i> or <i>tr</i> <i>"\000"</i> <i>"\n"</i> to read them.
       Alternatively, <i>echo</i> <i>`cat</i> <i>&lt;file&gt;`</i> works well.

       This manual page is incomplete, possibly inaccurate, and is the kind of thing
       that needs to be updated very often.
</pre>
<a name="SEE_ALSO" href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#SEE_ALSO"></a><h2>SEE ALSO  &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#section_dir"><font size="-2">top</font></a></h2><pre>       <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/cat.1.html">cat(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/dmesg.1.html">dmesg(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/find.1.html">find(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/free.1.html">free(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/ps.1.html">ps(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/tr.1.html">tr(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man1/uptime.1.html">uptime(1)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chroot.2.html">chroot(2)</a>,
       <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html">mmap(2)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readlink.2.html">readlink(2)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syslog.2.html">syslog(2)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/slabinfo.5.html">slabinfo(5)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/hier.7.html">hier(7)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man7/time.7.html">time(7)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/arp.8.html">arp(8)</a>,
       <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/hdparm.8.html">hdparm(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/ifconfig.8.html">ifconfig(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/init.8.html">init(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/lsmod.8.html">lsmod(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/lspci.8.html">lspci(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/mount.8.html">mount(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/netstat.8.html">netstat(8)</a>,
       <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/procinfo.8.html">procinfo(8)</a>, <a href="http://www.kernel.org/doc/man-pages/online/pages/man8/route.8.html">route(8)</a>
       The kernel source files: <i>Documentation/filesystems/proc.txt</i>,
       <i>Documentation/sysctl/vm.txt</i>
</pre>
<a name="COLOPHON" href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#COLOPHON"></a><h2>COLOPHON  &nbsp; &nbsp; &nbsp; &nbsp; <a href="http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html#section_dir"><font size="-2">top</font></a></h2><pre>       This page is part of release 3.32 of the Linux <i>man-pages</i> project.  A
       description of the project, and information about reporting bugs, can be found
       at <a href="http://www.kernel.org/doc/man-pages/">http://www.kernel.org/doc/man-pages/</a>.

Linux                                 2010-10-30                              PROC(5)
</pre>
<hr>
<p><font size="-1">HTML rendering created 2010-12-03 by Michael Kerrisk, author of <a href="http://man7.org/tlpi/"><em>The Linux Programming Interface</em></a></font>


<!--BEGIN-STATCOUNTER-->
<!-- Start of StatCounter Code -->
<script type="text/javascript">
var sc_project=5618989;
var sc_invisible=1;
var sc_partition=60;
var sc_click_stat=1;
var sc_security="4f8507d7";
</script>

<script type="text/javascript" src="./proc(5) - Linux manual page_files/counter.js"></script><noscript>&lt;div
class="statcounter"&gt;&lt;a title="customisable counter"
href="http://www.statcounter.com/free_hit_counter.html"
target="_blank"&gt;&lt;img class="statcounter"
src="http://c.statcounter.com/5618989/0/4f8507d7/1/" alt="customisable
counter" &gt;&lt;/a&gt;&lt;/div&gt;</noscript>
<!-- End of StatCounter Code -->
<!--END-STATCOUNTER-->



</p></body></html>