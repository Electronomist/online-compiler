Writing go programs

Given a file file.go, compile it using

$ 8g file.go
6g is the Go compiler for amd64; it will write the output in file.6. 
The ¡®6¡¯ identifies files for the amd64 architecture. 
The identifier letters for 386 and arm are ¡®8¡¯ and ¡®5¡¯. 
That is, if you were compiling for 386, you would use 8g and the output would be named file.8.

To link the file, use

$ 8l file.8
and to run it

$ ./8.out
A complete example:

$ cat >hello.go <<EOF
package main

import "fmt"

func main() {
	fmt.Printf("hello, world\n")
}
EOF
$ 8g hello.go
$ 8l hello.6
$ ./8.out
hello, world
$
There is no need to list hello.8's package dependencies (in this case, package fmt) 
on the 8l command line. The linker learns about them by reading hello.8.

To build more complicated programs, you will probably want to use a Makefile. 
There are examples in places like go/src/cmd/godoc/Makefile and go/src/pkg/*/Makefile. 
The document about contributing to the Go project gives more detail about the process 
of building and testing Go programs.